Theming
=======

Theming allows collections to be visually different from each other. The goal of Atrium's theming engine is to make it powerful enough to be useful without necessitating a full-fledged CMS.

There are three components to a theme:

  - Markup
  - Styles
  - Images

Markup
------
In order for there to be meaningful changes in markup between collection presentations there needs to be an intermediate template layer between the site layout and the elements that compose a collection page. It is important that these templates not be written in ERB because we may allow the templates to be edited within the Atrium web interface. We will use [Liquid][1] as the templating language.

The template will be rendered inside the body tag of a master layout. An example of the desired template syntax follows:

    <header role="banner">
      <hgroup>
        <h1>{{ collection.title }}</h1>
        <h2>{{ collection.tagline }}</h2>
      </hgroup>

      <div id="search" role="search">
        {% search collection %}
      </div>
    </header>

    <nav id="nav" role="navigation">
      {% navigation collection %}
    </nav>

    <div id="main" role="main">
      <div id="sidebar">
        {% sidebar collection %}
      </div>

      {% results collection %}

    </div>

To achieve the desired effect we will need to [write our own liquid tags][2] for some of the interface elements. The HTML generation that takes place in these custom tags could be done in [helper methods that are included in the tag model][3] or by [building our own templating rendering pipeline using Rails components][4]. Helper methods are not able to render partials so that approach may be a nonstarter. Putting html generation into helper methods that are then cast as liquid tags [may not be a good idea anyway][5]. There may be other, better ways of doing this but it is important that the template file itself be kept as simple as reasonably possible.

Styles
------
Atrium is meant for use in applications based on Rails 3.1 and up because it depends on the [Rails Asset Pipeline][6]. Being able to depend on the presence of the asset pipeline greatly simplifies the process of providing CSS, SCSS, and JavaScript files from a gem into the host application. It also has the benefit of producing minifed static assets, like CSS and JavaScript files to speed up production applications. Although the asset pipeline allows ERB tags to be inserted into CSS and SCSS files that mechanism cannot be used to override styles via the web application interface because the assets are expected to be "frozen" into static files in production. Instead of creating data-driven stylesheets we should provide a set of SCSS mixins and functions to make it easy to override the default colors within an arbitrary selector scope.

The styling in Blacklight was recently refactored to be more theme friendly. However, [consolidating all the site colors into variables that can be overridden][7] doesn't help our use case of wanting any number of instances of Blacklight views to have different styles _within the same application_.

Images
------
Adding presentational images is left as an exercise to the site implementer. They should be able to be added to the 'app/assets' directory and included via template or stylesheet as needed.

 [1]: http://liquidmarkup.org/
 [2]: https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers
 [3]: http://snippets.dzone.com/posts/show/7489
 [4]: http://amberbit.com/blog/render-views-partials-outside-controllers-rails-3
 [5]: http://37signals.com/svn/posts/1108-what-belongs-in-a-helper-method
 [6]: http://guides.rubyonrails.org/asset_pipeline.html
 [7]: https://github.com/projectblacklight/blacklight/blob/master/app/assets/stylesheets/blacklight/blacklight_defaults.css.scss
